def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

/// The greatest value Google Play allows for versionCode is 2100000000.
// Example: 1.2.13 => 102131 || 1.5.0 => 105000
static int generateVersionCode(String versionName) {
    def parts = versionName.split("\\.").collect { it.toInteger() }
    return parts[0] * Math.pow(10, 5) + parts[1] * Math.pow(10, 3) + parts[2] * Math.pow(10, 1)
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.5.0'
}

def flutterVersionCode = generateVersionCode(flutterVersionName)

apply plugin: 'com.android.application'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.firebase.crashlytics'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// Load signing key properties for production in Japan.
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('app/src/jpProd/key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "jp.mlkl.mirukuru"
        minSdkVersion 19
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        ndk {
//            abiFilters 'arm64-v8a', 'x86_64'
//        }
    }

    // signingConfig for production in Japan
    signingConfigs {
        jpProd {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    // Flavors to switch firebase settings and release signing configs.
    // In order to switch firebase settings, put corresponded google-services.json
    // under the flavors directory(android/app/src/<flavor>/google-service.json).
    flavorDimensions "env"
    productFlavors {
        vnDev {
            dimension "env"
            signingConfig signingConfigs.debug
        }
        vnTest {
            dimension "env"
            signingConfig signingConfigs.debug
        }
        vnProd {
            dimension "env"
            signingConfig signingConfigs.debug
        }
        jpTest {
            dimension "env"
            signingConfig signingConfigs.debug
        }
        jpProd {
            dimension "env"
            signingConfig signingConfigs.jpProd
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation platform('com.google.firebase:firebase-bom:31.0.3')
    implementation 'com.google.firebase:firebase-analytics'
}
