// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flustars_flutter3/flustars_flutter3.dart';
import 'package:mirukuru/core/network/refresh_model.dart';
import 'package:mirukuru/features/body_list/data/models/body_model.dart';
import 'package:mirukuru/features/carlist/data/models/car_model.dart';
import 'package:mirukuru/features/inform_detail/data/models/carSP_response.dart';
import 'package:mirukuru/features/inform_list/data/models/inform_list_response.dart';
import 'package:mirukuru/features/invite/data/models/invite_friend_reponse_model.dart';
import 'package:mirukuru/features/login/data/models/login_model.dart';
import 'package:mirukuru/features/message_board/data/models/upload_photo_response_model.dart';
import 'package:mirukuru/features/my_page/data/models/my_page_model.dart';
import 'package:mirukuru/features/new_question/data/models/upload_photo_response.dart';
import 'package:mirukuru/features/new_question/data/models/user_info_response_model.dart';

import 'package:mirukuru/features/new_user_registration/data/models/user_registration_model.dart';
import 'package:mirukuru/features/question/data/models/question_bean.dart';
import 'package:mirukuru/features/quotation/data/models/inquiry_request_model.dart';
import 'package:mirukuru/features/message_board/data/models/asnetcar_detail_model.dart';
import 'package:mirukuru/features/message_board/data/models/comment_model.dart';
import 'package:mirukuru/features/message_board/data/models/own_car_detail_model.dart';
import 'package:mirukuru/features/search_detail/data/models/search_car_model.dart';
import 'package:mirukuru/features/search_list/data/models/item_car_pic1_model.dart';
import 'package:mirukuru/features/search_list/data/models/item_search_model.dart';
import 'package:mirukuru/features/store_information/data/models/store_information_model.dart';
import '../../features/car_regist/data/model/post_own_car_response.dart';
import '../../features/maker/data/models/item_maker_model.dart';
import '../../features/my_page/data/models/user_car_name_model.dart';
import '../../features/new_user_registration/data/models/personal_register_model.dart';
import '../../features/search_top/data/models/company_get_model.dart';
import '../../features/search_top/data/models/name_model.dart';
import 'paginated_data_model.dart';

class JsonConvert<T> {
  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type.startsWith('LoginModel')) {
      return LoginModel.fromJson(json);
    } else if (type.startsWith('RefreshModel')) {
      return RefreshModel.fromJson(json);
    } else if (type.startsWith('UserRegistrationModel')) {
      return UserRegistrationModel.fromJson(json);
    } else if (type.startsWith('PersonalRegisterModel')) {
      return PersonalRegisterModel.fromJson(json);
    } else if (type.startsWith('NameModel')) {
      return NameModel.fromJson(json);
    } else if (type.startsWith('CompanyGetModel')) {
      return CompanyGetModel.fromJson(json);
    } else if (type.contains('MyPageModel')) {
      return MyPageModel.fromJson(json);
    } else if (type.startsWith('InviteFriendResponseModel')) {
      return InviteFriendResponseModel.fromJson(json);
    } else if (type.startsWith('StoreInformationModel')) {
      return StoreInformationModel.fromMap(json);
    } else if (type.startsWith('InquiryRequestModel')) {
      return InquiryRequestModel.fromMap(json);
    } else if (type.startsWith('UserInfoResponseModel')) {
      return UserInfoResponseModel.fromJson(json);
    } else if (type.startsWith('OwnCarDetailModel')) {
      return OwnCarDetailModel.fromMap(json);
    } else if (type.startsWith('InformListResponseModel')) {
      return InformListResponseModel.fromMap(json);
    } else if (type.startsWith('CarSPResponseModel')) {
      return CarSPResponseModel.fromJson(json);
    } else if (type.startsWith('PostOwnCarResponse')) {
      return PostOwnCarResponse.fromJson(json);
    } else if (type.startsWith('PaginatedDataModel<QuestionBean>')) {
      return PaginatedDataModel<QuestionBean>.fromMap(
          json, (map) => QuestionBean.fromJson(map));
    } else if (type.startsWith('PaginatedDataModel<ItemSearchModel>')) {
      return PaginatedDataModel<ItemSearchModel>.fromMap(
          json, (map) => ItemSearchModel.fromJson(map));
    }
    return json as M;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    String type = M.toString();
    if (type.startsWith('List<ItemMakerModel>')) {
      List<ItemMakerModel> mList = [];
      data.forEach((element) {
        ItemMakerModel itemMaker = ItemMakerModel.fromJson(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<CarModel>')) {
      List<CarModel> mList = [];
      data.forEach((element) {
        CarModel item = CarModel.fromJson(element);
        mList.add(item);
      });

      return mList as M;
    } else if (type.startsWith('List<BodyModel>')) {
      List<BodyModel> mList = [];
      data.forEach((element) {
        BodyModel itemMaker = BodyModel.fromJson(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<ItemSearchModel>')) {
      List<ItemSearchModel> mList = [];
      data.forEach((element) {
        ItemSearchModel itemMaker = ItemSearchModel.fromJson(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<ItemCarPic1Model>')) {
      List<ItemCarPic1Model> mList = [];
      data.forEach((element) {
        ItemCarPic1Model itemMaker = ItemCarPic1Model.fromJson(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<SearchCarModel>')) {
      List<SearchCarModel> mList = [];
      data.forEach((element) {
        SearchCarModel itemMaker = SearchCarModel.fromJson(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<QuestionBean>')) {
      List<QuestionBean> mList = [];
      data.forEach((element) {
        QuestionBean itemMaker = QuestionBean.fromJson(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<UserCarNameModel>')) {
      List<UserCarNameModel> mList = [];
      data.forEach((element) {
        UserCarNameModel itemMaker = UserCarNameModel.fromMap(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<AsnetCarDetailModel>')) {
      List<AsnetCarDetailModel> mList = [];
      data.forEach((element) {
        AsnetCarDetailModel itemMaker = AsnetCarDetailModel.fromMap(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<CommentModel>')) {
      List<CommentModel> mList = [];
      data.forEach((element) {
        CommentModel itemMaker = CommentModel.fromMap(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<UploadPhotoResponseModel>')) {
      List<UploadPhotoResponseModel> mList = [];
      data.forEach((element) {
        UploadPhotoResponseModel itemMaker =
            UploadPhotoResponseModel.fromJson(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<String>')) {
      List<String> mList = JsonUtil.getList(data) ?? [];
      return mList as M;
    } else if (type.startsWith('List<PhotoUploadResponseModel>')) {
      List<PhotoUploadResponseModel> mList = [];
      data.forEach((element) {
        PhotoUploadResponseModel itemMaker =
            PhotoUploadResponseModel.fromMap(element);
        mList.add(itemMaker);
      });

      return mList as M;
    } else if (type.startsWith('List<InformListResponseModel>')) {
      List<InformListResponseModel> mList = [];
      data.forEach((element) {
        InformListResponseModel itemMaker =
            InformListResponseModel.fromJson(element);
        mList.add(itemMaker);
      });

      return mList as M;
    }

    return data as M;
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
